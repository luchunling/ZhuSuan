#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import absolute_import
from __future__ import print_function
from __future__ import division
import types
import copy

import tensorflow as tf
from tensorflow.python.ops import array_ops
from tensorflow.python.ops import math_ops
from tensorflow.python.ops import special_math_ops
from tensorflow.python.ops import nn_ops
import six

from zhusuan.layers.base import Layer, MergeLayer


class _TensorflowWrapper(MergeLayer):
    def __init__(self, func, *args, **kwargs):
        args = list(args)
        incomings = [arg for arg in args
                     if isinstance(arg, (Layer, MergeLayer))]
        name = kwargs.get('name', None)
        self.func = func
        self.args = args
        self.kwargs = kwargs
        super(_TensorflowWrapper, self).__init__(incomings, name=name)

    def get_output_for(self, inputs, **kwargs_):
        args = copy.copy(self.args)
        kwargs = copy.copy(self.kwargs)
        inputs = list(reversed(inputs))
        for i, arg in enumerate(args):
            if isinstance(arg, (Layer, MergeLayer)):
                args[i] = inputs.pop()
        return self.func(*args, **kwargs)


def _wrap_tf_func(func):
    """
    Wraps a tensorflow op into `zhusuan.layers` with deferred construction
    when calling :method:`zhusuan.layers.get_output`
    """
    def _wrapper_func(*args, **kwargs):
        _wrapper_layer = _TensorflowWrapper(func, *args, **kwargs)
        return _wrapper_layer

    _wrapper_func.__doc__ = func.__doc__
    _wrapper_func.__name__ = func.__name__
    return _wrapper_func


def _wrap_namespace(old, new):
    _exceptions = [
        "placeholder",
        "sparse_placeholder",
        "placeholder_with_default",
    ]

    for name, obj in six.iteritems(old):
        if type(obj) in [types.FunctionType, types.BuiltinFunctionType]:
            if (getattr(tf, name, None) is not None) or (
                    getattr(tf.nn, name, None) is not None):
                if name not in _exceptions:
                    new[name] = _wrap_tf_func(old[name])


_op_book = {}
_wrap_namespace(array_ops.__dict__, _op_book)
_wrap_namespace(math_ops.__dict__, _op_book)
_wrap_namespace(special_math_ops.__dict__, _op_book)
_wrap_namespace(nn_ops.__dict__, _op_book)
globals().update(_op_book)


for k in sorted(six.iterkeys(_op_book)):
    v = _op_book[k]
    print('{}, {}, {}'.format(k, v.__name__, v))
print(len(_op_book))


# Below is an api list generated by following codes
# We explicitly put it to help editors/IDEs with auto-completion
#
# __all__ = list(six.iterkeys(_op_book))
# from pprint import pprint
# pprint(__all__)

__all__ = [
    'arg_min',
    'less',
    'fft',
    'conv3d_backprop_input_v2',
    'shape',
    'batch_ifft',
    'list_diff',
    'avg_pool',
    'l2_loss',
    'cumsum',
    'one_hot',
    'conv2d_transpose',
    'softmax_cross_entropy_with_logits',
    'segment_mean',
    'in_top_k',
    'reduce_any',
    'depth_to_space',
    'add',
    'complex',
    'batch_ifft3d',
    'elu',
    'real',
    'check_numerics',
    'ceil',
    'conv3d_backprop_input',
    'max_pool3d_grad',
    'ones',
    'sqrt',
    'unique',
    'to_double',
    'conv3d_backprop_filter_v2',
    'mod',
    'batch_fft',
    'conv3d_transpose',
    'erosion2d',
    'strided_slice',
    'to_float',
    'unique_with_counts',
    'sparse_segment_sum',
    'batch_ifft2d',
    'batch_fft2d',
    'lrn',
    'complex_abs',
    'div',
    'where',
    'round',
    'square',
    'sparse_segment_sqrt_n',
    'depthwise_conv2d_native_backprop_filter',
    'argmax',
    'dropout',
    'softsign',
    'conv2d_backprop_filter',
    'sign',
    'logical_and',
    'is_nan',
    'sparse_segment_mean',
    'stop_gradient',
    'to_bfloat16',
    'fft2d',
    'asin',
    'to_int32',
    'slice',
    'sparse_matmul',
    'cast',
    'sigmoid',
    'diag',
    'bias_add_v1',
    'is_inf',
    'space_to_batch',
    'abs',
    'batch_to_space',
    'xw_plus_b_v1',
    'reduce_all',
    'mul',
    'depthwise_conv2d_native',
    'conv3d',
    'batch_matmul',
    'fft3d',
    'top_k',
    'max_pool',
    'local_response_normalization',
    'transpose',
    'sparse_segment_mean_grad',
    'invert_permutation',
    'sparse_mask',
    'meshgrid',
    'segment_prod',
    'add_n',
    'gather_nd',
    'cos',
    'reverse',
    'equal',
    'greater',
    'softplus',
    'cumprod',
    'range',
    'erfc',
    'relu6',
    'arg_max',
    'acos',
    'digamma',
    'ones_like',
    'conv1d',
    'pow',
    'rank',
    'segment_min',
    'xw_plus_b',
    'unsorted_segment_sum',
    'bias_add',
    'zeta',
    'atrous_conv2d',
    'conv3d_backprop_filter',
    'select',
    'size',
    'logical_xor',
    'log',
    'segment_sum',
    'atan',
    'relu',
    'segment_max',
    'ifft3d',
    'zeros',
    'identity',
    'edit_distance',
    'sparse_softmax_cross_entropy_with_logits',
    'boolean_mask',
    'zeros_like',
    'batch_matrix_diag_part',
    'imag',
    'scalar_mul',
    'linspace',
    'igamma',
    'squeeze',
    'unpack',
    'reduce_mean',
    'not_equal',
    'argmin',
    'tanh',
    'maximum',
    'batch_matrix_band_part',
    'lgamma',
    'erf',
    'lbeta',
    'zeros_initializer',
    'depthwise_conv2d_native_backprop_input',
    'avg_pool3d',
    'pack',
    'avg_pool3d_grad',
    'constant',
    'diag_part',
    'batch_matrix_set_diag',
    'squared_difference',
    'inv',
    'softmax',
    'logical_or',
    'minimum',
    'igammac',
    'trace',
    'conv2d_backprop_input',
    'conj',
    'bitcast',
    'bias_add_grad',
    'tan',
    'fill',
    'expand_dims',
    'batch_matrix_transpose',
    'max_pool_with_argmax',
    'reduce_prod',
    'floor',
    'reshape',
    'extract_image_patches',
    'cross',
    'reverse_sequence',
    'dilation2d_backprop_input',
    'sparse_segment_sqrt_n_grad',
    'reduce_max',
    'pad',
    'split',
    'truediv',
    'batch_fft3d',
    'tile',
    'matmul',
    'log_softmax',
    'lin_space',
    'sin',
    'dilation2d',
    'dilation2d_backprop_filter',
    'saturate_cast',
    'batch_matrix_diag',
    'reduce_sum',
    'rsqrt',
    'is_finite',
    'reduce_min',
    'less_equal',
    'max_pool3d',
    'accumulate_n',
    'to_int64',
    'listdiff',
    'concat',
    'sub',
    'ifft2d',
    'ifft',
    'logical_not',
    'greater_equal',
    'shape_n',
    'gather',
    'space_to_depth',
    'floordiv',
    'polygamma',
    'conv2d',
    'exp',
    'neg']
